#+TITLE: SO Likelihood Implementation

* Preamble
#+BEGIN_SRC ipython :session :results none
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np
  from getdist import plots, loadMCSamples
#+END_SRC

* Definitions
Define default data directory and what CMB parameter names are.

#+BEGIN_SRC ipython :session :results none
  file_root = "./data/mcmc_pslike_tt-te-ee/mcmc"
  cosmo_params = [
      "cosmomc_theta",
      "logA",
      "ns",
      "ombh2",
      "omch2",
      "H0",
      "Alens"
  ]
#+END_SRC

* MCMC chains
Have a look at how chains evolve with time and check convergence or not.

#+BEGIN_SRC ipython :session :results raw none
  def plot_chains(file_root, params, nrow=None, ncol=None):
    from getdist.chains import chainFiles
    files = chainFiles(file_root, separator=".")

    nrow = len(params)//2 if nrow is None else nrow
    ncol = len(params)//2 if ncol is None else ncol
    plt.figure(figsize=(15, 10))

    # Loop over files independantly
    for f in files:
      sample = loadMCSamples(f[:-4])
      color = "C{}".format(f.split(".")[-2])

      # Get param values
      values = sample.getParams()

      # Get associated LaTeX labels
      labels = sample.paramNames.parsWithNames(cosmo_params)
      for i, p in enumerate(params):
        ax = plt.subplot(nrow, ncol, i+1)
        ax.set_ylabel(labels[i].latexLabel())
        ax.plot(getattr(values, p), alpha=0.75, color=color)

    plt.tight_layout()
#+END_SRC

Plot chains for the CMB parameters
#+BEGIN_SRC ipython :session :results raw drawer
  plot_chains(file_root, params=cosmo_params)
#+END_SRC

#+RESULTS:
:results:
# Out[243]:
[[file:./obipy-resources/d7nutU.png]]
:end:
* MCMC distributions
Load the different chains into one weighted sample with burnin corresponding to 40% of the chains.
#+BEGIN_SRC ipython :session :results none
  sample = loadMCSamples(file_root, settings={"ignore_rows": 0.4})
#+END_SRC

Show input values from simulation.
#+BEGIN_SRC ipython :session :results none
  def show_input(g, params):
      inputs = {
          "cosmomc_theta": 0.0104085,
          "logA": 3.044,
          "ombh2": 0.02237,
          "omch2": 0.1200,
          "ns": 0.9649,
          "Alens": 1.0,
          "H0": 67.36
      }
      for i, p in enumerate(params):
          x = inputs.get(p, np.nan)
          kwargs = dict(color="gray", ls="--", lw=1)
          for ax in g.subplots[:,i]:
              if ax: ax.axvline(x, **kwargs)
          for ax in g.subplots[i,:i]:
              if ax: ax.axhline(x, **kwargs)
#+END_SRC

** Triangle plot
#+BEGIN_SRC ipython :session :results raw drawer
  g = plots.getSubplotPlotter()
  g.settings.num_plot_contours = 3
  g.settings.lineM = ["-CO"]
  g.triangle_plot(sample, cosmo_params, filled=True, colors=["C0"])
  show_input(g, cosmo_params)
#+END_SRC

#+RESULTS:
:results:
# Out[279]:
[[file:./obipy-resources/tISbhO.png]]
:end:

** Table
#+BEGIN_SRC ipython :session :results none
from IPython.display import HTML, display
import tabulate
table = sample.getTable().tableParamNames
results = [[par.latexLabel(), par.mean, par.err] for j, par in enumerate(table.names)
                                              if table.name(j) in cosmo_params]
display(HTML(tabulate.tabulate(results, headers=["Parameter", "mean", "std."], tablefmt="html")))
#+END_SRC

*** Org table                                                    :noexport:
#+BEGIN_SRC ipython :session :results raw output
  print(tabulate.tabulate(results, headers=["Parameter", "mean", "std."], tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| Parameter                    |      mean |        std. |
|------------------------------+-----------+-------------|
| $\theta_\mathrm{MC}$         | 0.0104072 | 1.40964e-06 |
| $\log(10^{10} A_\mathrm{s})$ |   3.04293 |  0.00355408 |
| $n_\mathrm{s}$               |   0.96668 |   0.0031741 |
| $\Omega_\mathrm{b}h^2$       |  0.022315 | 6.16766e-05 |
| $\Omega_\mathrm{c}h^2$       |  0.120931 |  0.00110346 |
| $A_\mathrm{L}$               |    1.0096 |   0.0211548 |
| $H_0$                        |   66.9218 |    0.426916 |
